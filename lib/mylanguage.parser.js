/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function(root) {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleFunctions = { lenguaje: peg$parselenguaje },
        peg$startRuleFunction  = peg$parselenguaje,

        peg$c0 = function(bloque) {return {tipo:"bloque de lenguaje",bloque}},
        peg$c1 = function(algo) {return {tipo:"sentencia completa",...algo}},
        peg$c2 = function(prefijos, algo, sufijos) {return {prefijos,sufijos,algo}},
        peg$c3 = function(algo) {return algo},
        peg$c4 = function(prefijo) {return prefijo},
        peg$c5 = function(atribucion) {return atribucion},
        peg$c6 = function() {return {tipo:"prefijo de negación"}},
        peg$c7 = function(determinante) {return {tipo:"prefijo de negación"}, determinante},
        peg$c8 = function(asignacion) {return {tipo:"prefijo de asignación",asignacion}},
        peg$c9 = function(de) {return {tipo:"sufijo de de",de}},
        peg$c10 = function(y) {return {tipo:"sufijo de y",y}},
        peg$c11 = function(o) {return {tipo:"sufijo de o",o}},
        peg$c12 = function(condicion) {return {tipo:"sufijo de si condición",condicion}},
        peg$c13 = function(negacion, verbo, complementos) {return {tipo:"sufijo de verbo definido",verbo,negacion,complementos}},
        peg$c14 = function(negacion, verbo, complementos) {return {tipo:"sufijo de verbo indefinido",verbo,negacion,complementos}},
        peg$c15 = function(operador, algo) {return {tipo:"sufijo de operación lógica",operador,algo}},
        peg$c16 = function(pregunta) {return pregunta},
        peg$c17 = function(que) {return {tipo:"pregunta qué",que}},
        peg$c18 = function(por_que) {return {tipo:"pregunta por qué",por_que}},
        peg$c19 = function(como) {return {tipo:"pregunta cómo",como}},
        peg$c20 = function(donde) {return {tipo:"pregunta dónde",donde}},
        peg$c21 = function(cuando) {return {tipo:"pregunta cuándo",cuando}},
        peg$c22 = function(quien) {return {tipo:"pregunta quién",quien}},
        peg$c23 = function() {return text()},
        peg$c24 = peg$anyExpectation(),
        peg$c25 = /^[A-Za-z0-9\xC1\xC9\xCD\xD3\xDA\xE1\xE9\xED\xF3\xFA\xC0\xC8\xCC\xD2\xD9\xE0\xE8\xEC\xF2\xF9\xD1\xF1\-_]/,
        peg$c26 = peg$classExpectation([["A", "Z"], ["a", "z"], ["0", "9"], "\xC1", "\xC9", "\xCD", "\xD3", "\xDA", "\xE1", "\xE9", "\xED", "\xF3", "\xFA", "\xC0", "\xC8", "\xCC", "\xD2", "\xD9", "\xE0", "\xE8", "\xEC", "\xF2", "\xF9", "\xD1", "\xF1", "-", "_"], false, false),
        peg$c27 = function(atribucion, complementos) {return {atribucion,complementos}},
        peg$c28 = function(nominalidad, adjetivalidad) {return {tipo:"predicado de verbo",nominalidad,adjetivalidad}},
        peg$c29 = /^[\n\r\t ]/,
        peg$c30 = peg$classExpectation(["\n", "\r", "\t", " "], false, false),
        peg$c31 = "(",
        peg$c32 = peg$literalExpectation("(", false),
        peg$c33 = ")",
        peg$c34 = peg$literalExpectation(")", false),
        peg$c35 = "@",
        peg$c36 = peg$literalExpectation("@", false),
        peg$c37 = "#",
        peg$c38 = peg$literalExpectation("#", false),
        peg$c39 = "{",
        peg$c40 = peg$literalExpectation("{", false),
        peg$c41 = "}",
        peg$c42 = peg$literalExpectation("}", false),
        peg$c43 = "\xBF",
        peg$c44 = peg$literalExpectation("\xBF", false),
        peg$c45 = "?",
        peg$c46 = peg$literalExpectation("?", false),
        peg$c47 = ":)",
        peg$c48 = peg$literalExpectation(":)", false),
        peg$c49 = ":",
        peg$c50 = peg$literalExpectation(":", false),
        peg$c51 = "qu\xE9",
        peg$c52 = peg$literalExpectation("qu\xE9", false),
        peg$c53 = "por",
        peg$c54 = peg$literalExpectation("por", false),
        peg$c55 = "qui\xE9n",
        peg$c56 = peg$literalExpectation("qui\xE9n", false),
        peg$c57 = "c\xF3mo",
        peg$c58 = peg$literalExpectation("c\xF3mo", false),
        peg$c59 = "d\xF3nde",
        peg$c60 = peg$literalExpectation("d\xF3nde", false),
        peg$c61 = "cu\xE1ndo",
        peg$c62 = peg$literalExpectation("cu\xE1ndo", false),
        peg$c63 = "no",
        peg$c64 = peg$literalExpectation("no", false),
        peg$c65 = "del",
        peg$c66 = peg$literalExpectation("del", false),
        peg$c67 = "de",
        peg$c68 = peg$literalExpectation("de", false),
        peg$c69 = "y",
        peg$c70 = peg$literalExpectation("y", false),
        peg$c71 = "e",
        peg$c72 = peg$literalExpectation("e", false),
        peg$c73 = "o",
        peg$c74 = peg$literalExpectation("o", false),
        peg$c75 = "u",
        peg$c76 = peg$literalExpectation("u", false),
        peg$c77 = "si",
        peg$c78 = peg$literalExpectation("si", false),
        peg$c79 = "los",
        peg$c80 = peg$literalExpectation("los", false),
        peg$c81 = "las",
        peg$c82 = peg$literalExpectation("las", false),
        peg$c83 = "el",
        peg$c84 = peg$literalExpectation("el", false),
        peg$c85 = "la",
        peg$c86 = peg$literalExpectation("la", false),
        peg$c87 = "lo",
        peg$c88 = peg$literalExpectation("lo", false),
        peg$c89 = "unos",
        peg$c90 = peg$literalExpectation("unos", false),
        peg$c91 = "unas",
        peg$c92 = peg$literalExpectation("unas", false),
        peg$c93 = "uno",
        peg$c94 = peg$literalExpectation("uno", false),
        peg$c95 = "una",
        peg$c96 = peg$literalExpectation("una", false),
        peg$c97 = "un",
        peg$c98 = peg$literalExpectation("un", false),
        peg$c99 = "estos",
        peg$c100 = peg$literalExpectation("estos", false),
        peg$c101 = "estas",
        peg$c102 = peg$literalExpectation("estas", false),
        peg$c103 = "este",
        peg$c104 = peg$literalExpectation("este", false),
        peg$c105 = "esta",
        peg$c106 = peg$literalExpectation("esta", false),
        peg$c107 = "esto",
        peg$c108 = peg$literalExpectation("esto", false),
        peg$c109 = "esos",
        peg$c110 = peg$literalExpectation("esos", false),
        peg$c111 = "esas",
        peg$c112 = peg$literalExpectation("esas", false),
        peg$c113 = "ese",
        peg$c114 = peg$literalExpectation("ese", false),
        peg$c115 = "esa",
        peg$c116 = peg$literalExpectation("esa", false),
        peg$c117 = "eso",
        peg$c118 = peg$literalExpectation("eso", false),
        peg$c119 = "aquellos",
        peg$c120 = peg$literalExpectation("aquellos", false),
        peg$c121 = "aquellas",
        peg$c122 = peg$literalExpectation("aquellas", false),
        peg$c123 = "aquella",
        peg$c124 = peg$literalExpectation("aquella", false),
        peg$c125 = "aquello",
        peg$c126 = peg$literalExpectation("aquello", false),
        peg$c127 = "aquel",
        peg$c128 = peg$literalExpectation("aquel", false),
        peg$c129 = "todos",
        peg$c130 = peg$literalExpectation("todos", false),
        peg$c131 = "todas",
        peg$c132 = peg$literalExpectation("todas", false),
        peg$c133 = "todo",
        peg$c134 = peg$literalExpectation("todo", false),
        peg$c135 = "toda",
        peg$c136 = peg$literalExpectation("toda", false),
        peg$c137 = "algunos",
        peg$c138 = peg$literalExpectation("algunos", false),
        peg$c139 = "algunas",
        peg$c140 = peg$literalExpectation("algunas", false),
        peg$c141 = "alguna",
        peg$c142 = peg$literalExpectation("alguna", false),
        peg$c143 = "alguno",
        peg$c144 = peg$literalExpectation("alguno", false),
        peg$c145 = "alg\xFAn",
        peg$c146 = peg$literalExpectation("alg\xFAn", false),
        peg$c147 = "ningunos",
        peg$c148 = peg$literalExpectation("ningunos", false),
        peg$c149 = "ningunas",
        peg$c150 = peg$literalExpectation("ningunas", false),
        peg$c151 = "ninguna",
        peg$c152 = peg$literalExpectation("ninguna", false),
        peg$c153 = "ninguno",
        peg$c154 = peg$literalExpectation("ninguno", false),
        peg$c155 = "ning\xFAn",
        peg$c156 = peg$literalExpectation("ning\xFAn", false),
        peg$c157 = "mis",
        peg$c158 = peg$literalExpectation("mis", false),
        peg$c159 = "mi",
        peg$c160 = peg$literalExpectation("mi", false),
        peg$c161 = "tus",
        peg$c162 = peg$literalExpectation("tus", false),
        peg$c163 = "tu",
        peg$c164 = peg$literalExpectation("tu", false),
        peg$c165 = "sus",
        peg$c166 = peg$literalExpectation("sus", false),
        peg$c167 = "su",
        peg$c168 = peg$literalExpectation("su", false),
        peg$c169 = "nuestros",
        peg$c170 = peg$literalExpectation("nuestros", false),
        peg$c171 = "nuestro",
        peg$c172 = peg$literalExpectation("nuestro", false),
        peg$c173 = "vuestros",
        peg$c174 = peg$literalExpectation("vuestros", false),
        peg$c175 = "vuestro",
        peg$c176 = peg$literalExpectation("vuestro", false),
        peg$c177 = "muchos",
        peg$c178 = peg$literalExpectation("muchos", false),
        peg$c179 = "muchas",
        peg$c180 = peg$literalExpectation("muchas", false),
        peg$c181 = "mucho",
        peg$c182 = peg$literalExpectation("mucho", false),
        peg$c183 = "mucha",
        peg$c184 = peg$literalExpectation("mucha", false),
        peg$c185 = "bastantes",
        peg$c186 = peg$literalExpectation("bastantes", false),
        peg$c187 = "bastantas",
        peg$c188 = peg$literalExpectation("bastantas", false),
        peg$c189 = "bastante",
        peg$c190 = peg$literalExpectation("bastante", false),
        peg$c191 = "bastanta",
        peg$c192 = peg$literalExpectation("bastanta", false),
        peg$c193 = "suficientes",
        peg$c194 = peg$literalExpectation("suficientes", false),
        peg$c195 = "suficiente",
        peg$c196 = peg$literalExpectation("suficiente", false),
        peg$c197 = "pocos",
        peg$c198 = peg$literalExpectation("pocos", false),
        peg$c199 = "pocas",
        peg$c200 = peg$literalExpectation("pocas", false),
        peg$c201 = "poco",
        peg$c202 = peg$literalExpectation("poco", false),
        peg$c203 = "poca",
        peg$c204 = peg$literalExpectation("poca", false),
        peg$c205 = "insuficientes",
        peg$c206 = peg$literalExpectation("insuficientes", false),
        peg$c207 = "insuficiente",
        peg$c208 = peg$literalExpectation("insuficiente", false),
        peg$c209 = ".",
        peg$c210 = peg$literalExpectation(".", false),
        peg$c211 = "hay",
        peg$c212 = peg$literalExpectation("hay", false),
        peg$c213 = "hemos",
        peg$c214 = peg$literalExpectation("hemos", false),
        peg$c215 = "hab\xE9is",
        peg$c216 = peg$literalExpectation("hab\xE9is", false),
        peg$c217 = "han",
        peg$c218 = peg$literalExpectation("han", false),
        peg$c219 = "he",
        peg$c220 = peg$literalExpectation("he", false),
        peg$c221 = "has",
        peg$c222 = peg$literalExpectation("has", false),
        peg$c223 = "ha",
        peg$c224 = peg$literalExpectation("ha", false),
        peg$c225 = "soy",
        peg$c226 = peg$literalExpectation("soy", false),
        peg$c227 = "eres",
        peg$c228 = peg$literalExpectation("eres", false),
        peg$c229 = "es",
        peg$c230 = peg$literalExpectation("es", false),
        peg$c231 = "somos",
        peg$c232 = peg$literalExpectation("somos", false),
        peg$c233 = "sois",
        peg$c234 = peg$literalExpectation("sois", false),
        peg$c235 = "son",
        peg$c236 = peg$literalExpectation("son", false),
        peg$c237 = "causamos",
        peg$c238 = peg$literalExpectation("causamos", false),
        peg$c239 = "caus\xE1is",
        peg$c240 = peg$literalExpectation("caus\xE1is", false),
        peg$c241 = "causan",
        peg$c242 = peg$literalExpectation("causan", false),
        peg$c243 = "causo",
        peg$c244 = peg$literalExpectation("causo", false),
        peg$c245 = "causas",
        peg$c246 = peg$literalExpectation("causas", false),
        peg$c247 = "causa",
        peg$c248 = peg$literalExpectation("causa", false),
        peg$c249 = "conllevamos",
        peg$c250 = peg$literalExpectation("conllevamos", false),
        peg$c251 = "conllev\xE1is",
        peg$c252 = peg$literalExpectation("conllev\xE1is", false),
        peg$c253 = "conllevan",
        peg$c254 = peg$literalExpectation("conllevan", false),
        peg$c255 = "conllevo",
        peg$c256 = peg$literalExpectation("conllevo", false),
        peg$c257 = "conllevas",
        peg$c258 = peg$literalExpectation("conllevas", false),
        peg$c259 = "conlleva",
        peg$c260 = peg$literalExpectation("conlleva", false),
        peg$c261 = "implicamos",
        peg$c262 = peg$literalExpectation("implicamos", false),
        peg$c263 = "implic\xE1is",
        peg$c264 = peg$literalExpectation("implic\xE1is", false),
        peg$c265 = "implican",
        peg$c266 = peg$literalExpectation("implican", false),
        peg$c267 = "implico",
        peg$c268 = peg$literalExpectation("implico", false),
        peg$c269 = "implicas",
        peg$c270 = peg$literalExpectation("implicas", false),
        peg$c271 = "implica",
        peg$c272 = peg$literalExpectation("implica", false),
        peg$c273 = "posibilitamos",
        peg$c274 = peg$literalExpectation("posibilitamos", false),
        peg$c275 = "posibilit\xE1is",
        peg$c276 = peg$literalExpectation("posibilit\xE1is", false),
        peg$c277 = "posibilitan",
        peg$c278 = peg$literalExpectation("posibilitan", false),
        peg$c279 = "posibilito",
        peg$c280 = peg$literalExpectation("posibilito", false),
        peg$c281 = "posibilitas",
        peg$c282 = peg$literalExpectation("posibilitas", false),
        peg$c283 = "posibilita",
        peg$c284 = peg$literalExpectation("posibilita", false),
        peg$c285 = "=>",
        peg$c286 = peg$literalExpectation("=>", false),
        peg$c287 = "verdaderos",
        peg$c288 = peg$literalExpectation("verdaderos", false),
        peg$c289 = "verdaderas",
        peg$c290 = peg$literalExpectation("verdaderas", false),
        peg$c291 = "verdadero",
        peg$c292 = peg$literalExpectation("verdadero", false),
        peg$c293 = "verdadera",
        peg$c294 = peg$literalExpectation("verdadera", false),
        peg$c295 = "verdad",
        peg$c296 = peg$literalExpectation("verdad", false),
        peg$c297 = "falaz",
        peg$c298 = peg$literalExpectation("falaz", false),
        peg$c299 = "falaces",
        peg$c300 = peg$literalExpectation("falaces", false),
        peg$c301 = "indefinidos",
        peg$c302 = peg$literalExpectation("indefinidos", false),
        peg$c303 = "indefinidas",
        peg$c304 = peg$literalExpectation("indefinidas", false),
        peg$c305 = "indefinido",
        peg$c306 = peg$literalExpectation("indefinido", false),
        peg$c307 = "indefinida",
        peg$c308 = peg$literalExpectation("indefinida", false),
        peg$c309 = "definidos",
        peg$c310 = peg$literalExpectation("definidos", false),
        peg$c311 = "definidas",
        peg$c312 = peg$literalExpectation("definidas", false),
        peg$c313 = "definido",
        peg$c314 = peg$literalExpectation("definido", false),
        peg$c315 = "definida",
        peg$c316 = peg$literalExpectation("definida", false),
        peg$c317 = /^[0-9]/,
        peg$c318 = peg$classExpectation([["0", "9"]], false, false),
        peg$c319 = "*",
        peg$c320 = peg$literalExpectation("*", false),
        peg$c321 = "/",
        peg$c322 = peg$literalExpectation("/", false),
        peg$c323 = "+",
        peg$c324 = peg$literalExpectation("+", false),
        peg$c325 = "-",
        peg$c326 = peg$literalExpectation("-", false),
        peg$c327 = "%",
        peg$c328 = peg$literalExpectation("%", false),
        peg$c329 = "^/",
        peg$c330 = peg$literalExpectation("^/", false),
        peg$c331 = "^",
        peg$c332 = peg$literalExpectation("^", false),
        peg$c333 = ":=",
        peg$c334 = peg$literalExpectation(":=", false),
        peg$c335 = "=",
        peg$c336 = peg$literalExpectation("=", false),
        peg$c337 = "&&",
        peg$c338 = peg$literalExpectation("&&", false),
        peg$c339 = "||",
        peg$c340 = peg$literalExpectation("||", false),
        peg$c341 = "&",
        peg$c342 = peg$literalExpectation("&", false),
        peg$c343 = "|",
        peg$c344 = peg$literalExpectation("|", false),
        peg$c345 = "$",
        peg$c346 = peg$literalExpectation("$", false),
        peg$c347 = "cualquier cosa",
        peg$c348 = peg$literalExpectation("cualquier cosa", false),

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parselenguaje() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsealgo_completa();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsealgo_completa();
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parse_();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parse_();
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c0(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsealgo_completa() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsealgo_complementable();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSIMB_EOS();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c1(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsealgo_complementable() {
      var s0;

      s0 = peg$parsealgo_complementable_sin_agrupar();
      if (s0 === peg$FAILED) {
        s0 = peg$parsealgo_complementable_agrupado();
      }

      return s0;
    }

    function peg$parsealgo_complementable_sin_agrupar() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseprefijo();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseprefijo();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsealgo();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsesufijo();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsesufijo();
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c2(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsealgo_complementable_agrupado() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseSIMB_ABRE_AGRUPACION();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse_();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsealgo_complementable();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse_();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse_();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseSIMB_CIERRA_AGRUPACION();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c3(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsealgo_complementable_prespaciado() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parse_();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsealgo_complementable();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c3(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseprefijo() {
      var s0;

      s0 = peg$parseprefijo_agrupado();
      if (s0 === peg$FAILED) {
        s0 = peg$parseprefijo_crudo();
      }

      return s0;
    }

    function peg$parseprefijo_agrupado() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseSIMB_ABRE_AGRUPACION();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse_();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseprefijo_crudo();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse_();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse_();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseSIMB_CIERRA_AGRUPACION();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c4(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseprefijo_crudo() {
      var s0;

      s0 = peg$parseprefijo_de_atributo();
      if (s0 === peg$FAILED) {
        s0 = peg$parseprefijo_de_determinante();
        if (s0 === peg$FAILED) {
          s0 = peg$parseprefijo_de_negacion();
          if (s0 === peg$FAILED) {
            s0 = peg$parseprefijo_de_asignacion();
          }
        }
      }

      return s0;
    }

    function peg$parseprefijo_de_atributo() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseatribucion();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse_();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c5(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseprefijo_de_negacion() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseSIMB_NO();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse_();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c6();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseprefijo_de_determinante() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseSIMB_DETERMINANTE();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse_();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c7(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseprefijo_de_asignacion() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseSIMB_ABRE_ASIGNACION();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsealgo_complementable();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSIMB_CIERRA_ASIGNACION();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse_();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse_();
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c8(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesufijo() {
      var s0;

      s0 = peg$parsesufijo_agrupado();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesufijo_crudo();
      }

      return s0;
    }

    function peg$parsesufijo_agrupado() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSIMB_ABRE_AGRUPACION();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parse_();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parse_();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsesufijo_crudo();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parse_();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parse_();
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSIMB_CIERRA_AGRUPACION();
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesufijo_crudo() {
      var s0;

      s0 = peg$parsesufijo_de_atributo();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesufijo_de_verbo();
        if (s0 === peg$FAILED) {
          s0 = peg$parsesufijo_de_y();
          if (s0 === peg$FAILED) {
            s0 = peg$parsesufijo_de_o();
            if (s0 === peg$FAILED) {
              s0 = peg$parsesufijo_de_de();
              if (s0 === peg$FAILED) {
                s0 = peg$parsesufijo_de_operacion_logica();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsesufijo_de_si();
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsesufijo_de_de() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSIMB_DE();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parse_();
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsealgo_complementable();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c9(s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesufijo_de_y() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSIMB_Y();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parse_();
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsealgo_complementable();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c10(s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesufijo_de_o() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSIMB_O();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parse_();
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsealgo_complementable();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c11(s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesufijo_de_si() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSIMB_SI();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parse_();
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsealgo_complementable();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c12(s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesufijo_de_atributo() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseatribucion();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c5(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesufijo_de_verbo() {
      var s0;

      s0 = peg$parsesufijo_de_verbo_definido();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesufijo_de_verbo_indefinido();
      }

      return s0;
    }

    function peg$parsesufijo_de_verbo_definido() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parse_();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseSIMB_NO();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse_();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSIMB_VERBO_DEFINIDO();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepredicado_de_verbo();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c13(s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesufijo_de_verbo_indefinido() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSIMB_NO();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSIMB_VERBO_INDEFINIDO();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepalabra();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepredicado_de_verbo();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c14(s1, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesufijo_de_operacion_logica() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseoperador_logico();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parse_();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parse_();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsealgo_complementable();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c15(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsealgo() {
      var s0;

      s0 = peg$parsealgo_agrupado();
      if (s0 === peg$FAILED) {
        s0 = peg$parsealgo_crudo();
      }

      return s0;
    }

    function peg$parsealgo_prespaciado() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parse_();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsealgo();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c3(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsealgo_agrupado() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseSIMB_ABRE_AGRUPACION();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse_();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsealgo();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse_();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse_();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseSIMB_CIERRA_AGRUPACION();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c3(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsealgo_crudo() {
      var s0;

      s0 = peg$parsepregunta();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefenomeno();
        if (s0 === peg$FAILED) {
          s0 = peg$parsevalor();
        }
      }

      return s0;
    }

    function peg$parsepregunta() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseSIMB_ABRE_PREGUNTA();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepregunta_tipo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSIMB_CIERRA_PREGUNTA();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c16(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepregunta_tipo() {
      var s0;

      s0 = peg$parsepregunta_booleana();
      if (s0 === peg$FAILED) {
        s0 = peg$parsepregunta_que();
        if (s0 === peg$FAILED) {
          s0 = peg$parsepregunta_por_que();
          if (s0 === peg$FAILED) {
            s0 = peg$parsepregunta_como();
            if (s0 === peg$FAILED) {
              s0 = peg$parsepregunta_donde();
              if (s0 === peg$FAILED) {
                s0 = peg$parsepregunta_cuando();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsepregunta_quien();
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsepregunta_booleana() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsealgo();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c3(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsepregunta_que() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseSIMB_QUE_ACENTO();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse_();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsealgo();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c17(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepregunta_por_que() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseSIMB_POR_QUE_ACENTO();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse_();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsealgo();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c18(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepregunta_como() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseSIMB_COMO_ACENTO();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse_();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsealgo();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c19(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepregunta_donde() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseSIMB_DONDE_ACENTO();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse_();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsealgo();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c20(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepregunta_cuando() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseSIMB_CUANDO_ACENTO();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse_();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsealgo();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c21(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepregunta_quien() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseSIMB_QUIEN_ACENTO();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse_();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsealgo();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c22(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefenomeno() {
      var s0;

      s0 = peg$parsefenomeno_en_crudo();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefenomeno_agrupado();
      }

      return s0;
    }

    function peg$parsefenomeno_en_crudo() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseSIMB_FENOMENO();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepalabra();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c23();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefenomeno_agrupado() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseSIMB_ABRE_FENOMENO();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseSIMB_CIERRA_FENOMENO();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c24); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parseSIMB_CIERRA_FENOMENO();
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c24); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSIMB_CIERRA_FENOMENO();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c23();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsevalor() {
      var s0;

      s0 = peg$parseSIMB_VERDAD();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSIMB_MENTIRA();
        if (s0 === peg$FAILED) {
          s0 = peg$parseSIMB_INDEFINIDO();
          if (s0 === peg$FAILED) {
            s0 = peg$parseSIMB_DEFINIDO();
            if (s0 === peg$FAILED) {
              s0 = peg$parseSIMB_NUMERO();
              if (s0 === peg$FAILED) {
                s0 = peg$parseSIMB_CUALQUIER_COSA();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsepalabra() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c25.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c26); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c25.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c26); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c23();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseatribucion() {
      var s0;

      s0 = peg$parseatribucion_agrupada();
      if (s0 === peg$FAILED) {
        s0 = peg$parseatribucion_sin_agrupar();
      }

      return s0;
    }

    function peg$parseatribucion_agrupada() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseSIMB_ABRE_AGRUPACION();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse_();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseatribucion();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse_();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse_();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseSIMB_CIERRA_AGRUPACION();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c5(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseatribucion_sin_agrupar() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseSIMB_ATRIBUTO();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepalabra();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecomplementos_de_atribucion();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c27(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseatribucion_agrupada_prespaciada() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parse_();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseatribucion_agrupada();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c5(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parselista_de_atribuciones() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseatribucion_agrupada_prespaciada();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parseatribucion_agrupada_prespaciada();
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecomplementos_de_atribucion() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseSIMB_INICIO_LISTA_ATRIBUCIONES();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse_();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsealgo_complementable();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c3(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepredicado_de_verbo() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsealgo_complementable_prespaciado();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselista_de_atribuciones();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c28(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseoperador_logico() {
      var s0;

      s0 = peg$parseSIMB_NUMERO();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSIMB_MULTIPLICACION();
        if (s0 === peg$FAILED) {
          s0 = peg$parseSIMB_DIVISION();
          if (s0 === peg$FAILED) {
            s0 = peg$parseSIMB_SUMA();
            if (s0 === peg$FAILED) {
              s0 = peg$parseSIMB_RESTA();
              if (s0 === peg$FAILED) {
                s0 = peg$parseSIMB_RESIDUO();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseSIMB_RAIZ_DE();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseSIMB_POTENCIA();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseSIMB_DEFINICION();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseSIMB_IGUALACION();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseSIMB_Y_BINARIO();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseSIMB_O_BINARIO();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseSIMB_Y_LOGICO();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseSIMB_O_LOGICO();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseSIMB_VARIABLE();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parse_() {
      var s0;

      if (peg$c29.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c30); }
      }

      return s0;
    }

    function peg$parseSIMB_ABRE_AGRUPACION() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 40) {
        s0 = peg$c31;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c32); }
      }

      return s0;
    }

    function peg$parseSIMB_CIERRA_AGRUPACION() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 41) {
        s0 = peg$c33;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c34); }
      }

      return s0;
    }

    function peg$parseSIMB_ATRIBUTO() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 64) {
        s0 = peg$c35;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c36); }
      }

      return s0;
    }

    function peg$parseSIMB_FENOMENO() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 35) {
        s0 = peg$c37;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c38); }
      }

      return s0;
    }

    function peg$parseSIMB_ABRE_FENOMENO() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 123) {
        s0 = peg$c39;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c40); }
      }

      return s0;
    }

    function peg$parseSIMB_CIERRA_FENOMENO() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 125) {
        s0 = peg$c41;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c42); }
      }

      return s0;
    }

    function peg$parseSIMB_ABRE_PREGUNTA() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 191) {
        s0 = peg$c43;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c44); }
      }

      return s0;
    }

    function peg$parseSIMB_CIERRA_PREGUNTA() {
      var s0, s1;

      s0 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 63) {
        s1 = peg$c45;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c46); }
      }
      peg$silentFails--;
      if (s1 !== peg$FAILED) {
        peg$currPos = s0;
        s0 = void 0;
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSIMB_ABRE_ASIGNACION() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 40) {
        s0 = peg$c31;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c32); }
      }

      return s0;
    }

    function peg$parseSIMB_CIERRA_ASIGNACION() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c47) {
        s0 = peg$c47;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c48); }
      }

      return s0;
    }

    function peg$parseSIMB_INICIO_LISTA_ATRIBUCIONES() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 58) {
        s0 = peg$c49;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c50); }
      }

      return s0;
    }

    function peg$parseSIMB_QUE_ACENTO() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c51) {
        s0 = peg$c51;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c52); }
      }

      return s0;
    }

    function peg$parseSIMB_POR_QUE_ACENTO() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c53) {
        s1 = peg$c53;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c54); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse_();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c51) {
            s3 = peg$c51;
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c52); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSIMB_QUIEN_ACENTO() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c55) {
        s0 = peg$c55;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c56); }
      }

      return s0;
    }

    function peg$parseSIMB_COMO_ACENTO() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c57) {
        s0 = peg$c57;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c58); }
      }

      return s0;
    }

    function peg$parseSIMB_DONDE_ACENTO() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c59) {
        s0 = peg$c59;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c60); }
      }

      return s0;
    }

    function peg$parseSIMB_CUANDO_ACENTO() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c61) {
        s0 = peg$c61;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c62); }
      }

      return s0;
    }

    function peg$parseSIMB_NO() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c63) {
        s0 = peg$c63;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c64); }
      }

      return s0;
    }

    function peg$parseSIMB_DE() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c65) {
        s0 = peg$c65;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c66); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c67) {
          s0 = peg$c67;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c68); }
        }
      }

      return s0;
    }

    function peg$parseSIMB_Y() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 121) {
        s0 = peg$c69;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c70); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 101) {
          s0 = peg$c71;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c72); }
        }
      }

      return s0;
    }

    function peg$parseSIMB_O() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 111) {
        s0 = peg$c73;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c74); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 117) {
          s0 = peg$c75;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c76); }
        }
      }

      return s0;
    }

    function peg$parseSIMB_SI() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c77) {
        s0 = peg$c77;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c78); }
      }

      return s0;
    }

    function peg$parseSIMB_DETERMINANTE() {
      var s0;

      s0 = peg$parseSIMB_DETERMINANTE_ARTICULO();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSIMB_DETERMINANTE_DISTANCIA();
        if (s0 === peg$FAILED) {
          s0 = peg$parseSIMB_DETERMINANTE_COMPLETITUD();
          if (s0 === peg$FAILED) {
            s0 = peg$parseSIMB_DETERMINANTE_PERTENENCIA();
          }
        }
      }

      return s0;
    }

    function peg$parseSIMB_DETERMINANTE_ARTICULO() {
      var s0;

      s0 = peg$parseSIMB_DETERMINANTE_ARTICULO_DEF();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSIMB_DETERMINANTE_ARTICULO_INDEF();
      }

      return s0;
    }

    function peg$parseSIMB_DETERMINANTE_ARTICULO_DEF() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c79) {
        s0 = peg$c79;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c80); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c81) {
          s0 = peg$c81;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c82); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c83) {
            s0 = peg$c83;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c84); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c85) {
              s0 = peg$c85;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c86); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c87) {
                s0 = peg$c87;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c88); }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseSIMB_DETERMINANTE_ARTICULO_INDEF() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c89) {
        s0 = peg$c89;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c90); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c91) {
          s0 = peg$c91;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c92); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c93) {
            s0 = peg$c93;
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c94); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c95) {
              s0 = peg$c95;
              peg$currPos += 3;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c96); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c97) {
                s0 = peg$c97;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c98); }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseSIMB_DETERMINANTE_DISTANCIA() {
      var s0;

      s0 = peg$parseSIMB_DETERMINANTE_CERCANIA();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSIMB_DETERMINANTE_MEDIANIA();
        if (s0 === peg$FAILED) {
          s0 = peg$parseSIMB_DETERMINANTE_LEJANIA();
        }
      }

      return s0;
    }

    function peg$parseSIMB_DETERMINANTE_CERCANIA() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c99) {
        s0 = peg$c99;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c100); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c101) {
          s0 = peg$c101;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c102); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c103) {
            s0 = peg$c103;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c104); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c105) {
              s0 = peg$c105;
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c106); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c107) {
                s0 = peg$c107;
                peg$currPos += 4;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c108); }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseSIMB_DETERMINANTE_MEDIANIA() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c109) {
        s0 = peg$c109;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c110); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c111) {
          s0 = peg$c111;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c112); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c113) {
            s0 = peg$c113;
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c114); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c115) {
              s0 = peg$c115;
              peg$currPos += 3;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c116); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c117) {
                s0 = peg$c117;
                peg$currPos += 3;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c118); }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseSIMB_DETERMINANTE_LEJANIA() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c119) {
        s0 = peg$c119;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c120); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c121) {
          s0 = peg$c121;
          peg$currPos += 8;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c122); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c123) {
            s0 = peg$c123;
            peg$currPos += 7;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c124); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c125) {
              s0 = peg$c125;
              peg$currPos += 7;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c126); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c127) {
                s0 = peg$c127;
                peg$currPos += 5;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c128); }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseSIMB_DETERMINANTE_COMPLETITUD() {
      var s0;

      s0 = peg$parseSIMB_DETERMINANTE_TOTALIDAD();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSIMB_DETERMINANTE_ALGUNIDAD();
        if (s0 === peg$FAILED) {
          s0 = peg$parseSIMB_DETERMINANTE_NINGUNIDAD();
          if (s0 === peg$FAILED) {
            s0 = peg$parseSIMB_DETERMINANTE_MUCHIDAD();
            if (s0 === peg$FAILED) {
              s0 = peg$parseSIMB_DETERMINANTE_BASTANTIDAD();
              if (s0 === peg$FAILED) {
                s0 = peg$parseSIMB_DETERMINANTE_SUFICIENCIA();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseSIMB_DETERMINANTE_POQUIDAD();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseSIMB_DETERMINANTE_INSUFICIENCIA();
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseSIMB_DETERMINANTE_TOTALIDAD() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c129) {
        s0 = peg$c129;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c130); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c131) {
          s0 = peg$c131;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c132); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c133) {
            s0 = peg$c133;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c134); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c135) {
              s0 = peg$c135;
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c136); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseSIMB_DETERMINANTE_ALGUNIDAD() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c137) {
        s0 = peg$c137;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c138); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c139) {
          s0 = peg$c139;
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c140); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c141) {
            s0 = peg$c141;
            peg$currPos += 6;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c142); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c143) {
              s0 = peg$c143;
              peg$currPos += 6;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c144); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c145) {
                s0 = peg$c145;
                peg$currPos += 5;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c146); }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseSIMB_DETERMINANTE_NINGUNIDAD() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c147) {
        s0 = peg$c147;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c148); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c149) {
          s0 = peg$c149;
          peg$currPos += 8;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c150); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c151) {
            s0 = peg$c151;
            peg$currPos += 7;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c152); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c153) {
              s0 = peg$c153;
              peg$currPos += 7;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c154); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c155) {
                s0 = peg$c155;
                peg$currPos += 6;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c156); }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseSIMB_DETERMINANTE_PERTENENCIA() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c157) {
        s0 = peg$c157;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c158); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c159) {
          s0 = peg$c159;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c160); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c161) {
            s0 = peg$c161;
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c162); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c163) {
              s0 = peg$c163;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c164); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c165) {
                s0 = peg$c165;
                peg$currPos += 3;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c166); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c167) {
                  s0 = peg$c167;
                  peg$currPos += 2;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c168); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 8) === peg$c169) {
                    s0 = peg$c169;
                    peg$currPos += 8;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c170); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 7) === peg$c171) {
                      s0 = peg$c171;
                      peg$currPos += 7;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c172); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 8) === peg$c173) {
                        s0 = peg$c173;
                        peg$currPos += 8;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c174); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 7) === peg$c175) {
                          s0 = peg$c175;
                          peg$currPos += 7;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c176); }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseSIMB_DETERMINANTE_MUCHIDAD() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c177) {
        s0 = peg$c177;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c178); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c179) {
          s0 = peg$c179;
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c180); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c181) {
            s0 = peg$c181;
            peg$currPos += 5;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c182); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c183) {
              s0 = peg$c183;
              peg$currPos += 5;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c184); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseSIMB_DETERMINANTE_BASTANTIDAD() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c185) {
        s0 = peg$c185;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c186); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c187) {
          s0 = peg$c187;
          peg$currPos += 9;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c188); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c189) {
            s0 = peg$c189;
            peg$currPos += 8;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c190); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 8) === peg$c191) {
              s0 = peg$c191;
              peg$currPos += 8;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c192); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseSIMB_DETERMINANTE_SUFICIENCIA() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c193) {
        s0 = peg$c193;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c194); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c195) {
          s0 = peg$c195;
          peg$currPos += 10;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c196); }
        }
      }

      return s0;
    }

    function peg$parseSIMB_DETERMINANTE_POQUIDAD() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c197) {
        s0 = peg$c197;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c198); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c199) {
          s0 = peg$c199;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c200); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c201) {
            s0 = peg$c201;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c202); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c203) {
              s0 = peg$c203;
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c204); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseSIMB_DETERMINANTE_INSUFICIENCIA() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c205) {
        s0 = peg$c205;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c206); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 12) === peg$c207) {
          s0 = peg$c207;
          peg$currPos += 12;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c208); }
        }
      }

      return s0;
    }

    function peg$parseSIMB_EOS() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c209;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c210); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 63) {
          s1 = peg$c45;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c46); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse_();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parseSIMB_EOF();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSIMB_EOF() {
      var s0, s1;

      s0 = peg$currPos;
      peg$silentFails++;
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c24); }
      }
      peg$silentFails--;
      if (s1 === peg$FAILED) {
        s0 = void 0;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSIMB_VERBO_HABER() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c211) {
        s0 = peg$c211;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c212); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c213) {
          s0 = peg$c213;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c214); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c215) {
            s0 = peg$c215;
            peg$currPos += 6;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c216); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c217) {
              s0 = peg$c217;
              peg$currPos += 3;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c218); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c219) {
                s0 = peg$c219;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c220); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c221) {
                  s0 = peg$c221;
                  peg$currPos += 3;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c222); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c223) {
                    s0 = peg$c223;
                    peg$currPos += 2;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c224); }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseSIMB_VERBO_SER() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c225) {
        s0 = peg$c225;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c226); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c227) {
          s0 = peg$c227;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c228); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c229) {
            s0 = peg$c229;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c230); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c231) {
              s0 = peg$c231;
              peg$currPos += 5;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c232); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c233) {
                s0 = peg$c233;
                peg$currPos += 4;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c234); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c235) {
                  s0 = peg$c235;
                  peg$currPos += 3;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c236); }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseSIMB_VERBO_CAUSAR() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c237) {
        s0 = peg$c237;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c238); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c239) {
          s0 = peg$c239;
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c240); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c241) {
            s0 = peg$c241;
            peg$currPos += 6;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c242); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c243) {
              s0 = peg$c243;
              peg$currPos += 5;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c244); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c245) {
                s0 = peg$c245;
                peg$currPos += 6;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c246); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c247) {
                  s0 = peg$c247;
                  peg$currPos += 5;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c248); }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseSIMB_VERBO_CONLLEVAR() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c249) {
        s0 = peg$c249;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c250); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c251) {
          s0 = peg$c251;
          peg$currPos += 10;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c252); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 9) === peg$c253) {
            s0 = peg$c253;
            peg$currPos += 9;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c254); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 8) === peg$c255) {
              s0 = peg$c255;
              peg$currPos += 8;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c256); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 9) === peg$c257) {
                s0 = peg$c257;
                peg$currPos += 9;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c258); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 8) === peg$c259) {
                  s0 = peg$c259;
                  peg$currPos += 8;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c260); }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseSIMB_VERBO_IMPLICAR() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c261) {
        s0 = peg$c261;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c262); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c263) {
          s0 = peg$c263;
          peg$currPos += 9;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c264); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c265) {
            s0 = peg$c265;
            peg$currPos += 8;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c266); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c267) {
              s0 = peg$c267;
              peg$currPos += 7;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c268); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 8) === peg$c269) {
                s0 = peg$c269;
                peg$currPos += 8;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c270); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 7) === peg$c271) {
                  s0 = peg$c271;
                  peg$currPos += 7;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c272); }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseSIMB_VERBO_POSIBILITAR() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c273) {
        s0 = peg$c273;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c274); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 12) === peg$c275) {
          s0 = peg$c275;
          peg$currPos += 12;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c276); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 11) === peg$c277) {
            s0 = peg$c277;
            peg$currPos += 11;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c278); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 10) === peg$c279) {
              s0 = peg$c279;
              peg$currPos += 10;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c280); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 11) === peg$c281) {
                s0 = peg$c281;
                peg$currPos += 11;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c282); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 10) === peg$c283) {
                  s0 = peg$c283;
                  peg$currPos += 10;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c284); }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseSIMB_VERBO_DEFINIDO() {
      var s0;

      s0 = peg$parseSIMB_VERBO_SER();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSIMB_VERBO_CAUSAR();
        if (s0 === peg$FAILED) {
          s0 = peg$parseSIMB_VERBO_CONLLEVAR();
          if (s0 === peg$FAILED) {
            s0 = peg$parseSIMB_VERBO_IMPLICAR();
            if (s0 === peg$FAILED) {
              s0 = peg$parseSIMB_VERBO_POSIBILITAR();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseSIMB_VERBO_INDEFINIDO() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c285) {
          s2 = peg$c285;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c286); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parse_();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parse_();
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSIMB_VERDAD() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c287) {
        s0 = peg$c287;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c288); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c289) {
          s0 = peg$c289;
          peg$currPos += 10;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c290); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 9) === peg$c291) {
            s0 = peg$c291;
            peg$currPos += 9;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c292); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 9) === peg$c293) {
              s0 = peg$c293;
              peg$currPos += 9;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c294); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c295) {
                s0 = peg$c295;
                peg$currPos += 6;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c296); }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseSIMB_MENTIRA() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c297) {
        s0 = peg$c297;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c298); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c299) {
          s0 = peg$c299;
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c300); }
        }
      }

      return s0;
    }

    function peg$parseSIMB_INDEFINIDO() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c301) {
        s0 = peg$c301;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c302); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 11) === peg$c303) {
          s0 = peg$c303;
          peg$currPos += 11;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c304); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 10) === peg$c305) {
            s0 = peg$c305;
            peg$currPos += 10;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c306); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 10) === peg$c307) {
              s0 = peg$c307;
              peg$currPos += 10;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c308); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseSIMB_DEFINIDO() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c309) {
        s0 = peg$c309;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c310); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c311) {
          s0 = peg$c311;
          peg$currPos += 9;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c312); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c313) {
            s0 = peg$c313;
            peg$currPos += 8;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c314); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 8) === peg$c315) {
              s0 = peg$c315;
              peg$currPos += 8;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c316); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseSIMB_NUMERO() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c317.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c318); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c317.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c318); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s3 = peg$c209;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c210); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          if (peg$c317.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c318); }
          }
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (peg$c317.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c318); }
              }
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c23();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSIMB_MULTIPLICACION() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 42) {
        s0 = peg$c319;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c320); }
      }

      return s0;
    }

    function peg$parseSIMB_DIVISION() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 47) {
        s0 = peg$c321;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c322); }
      }

      return s0;
    }

    function peg$parseSIMB_SUMA() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 43) {
        s0 = peg$c323;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c324); }
      }

      return s0;
    }

    function peg$parseSIMB_RESTA() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 45) {
        s0 = peg$c325;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c326); }
      }

      return s0;
    }

    function peg$parseSIMB_RESIDUO() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 37) {
        s0 = peg$c327;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c328); }
      }

      return s0;
    }

    function peg$parseSIMB_RAIZ_DE() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c329) {
        s0 = peg$c329;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c330); }
      }

      return s0;
    }

    function peg$parseSIMB_POTENCIA() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 94) {
        s0 = peg$c331;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c332); }
      }

      return s0;
    }

    function peg$parseSIMB_DEFINICION() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c333) {
        s0 = peg$c333;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c334); }
      }

      return s0;
    }

    function peg$parseSIMB_IGUALACION() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 61) {
        s0 = peg$c335;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c336); }
      }

      return s0;
    }

    function peg$parseSIMB_Y_BINARIO() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c337) {
        s0 = peg$c337;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c338); }
      }

      return s0;
    }

    function peg$parseSIMB_O_BINARIO() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c339) {
        s0 = peg$c339;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c340); }
      }

      return s0;
    }

    function peg$parseSIMB_Y_LOGICO() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 38) {
        s0 = peg$c341;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c342); }
      }

      return s0;
    }

    function peg$parseSIMB_O_LOGICO() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 124) {
        s0 = peg$c343;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c344); }
      }

      return s0;
    }

    function peg$parseSIMB_VARIABLE() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 36) {
        s0 = peg$c345;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c346); }
      }

      return s0;
    }

    function peg$parseSIMB_CUALQUIER_COSA() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c347) {
        s0 = peg$c347;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c348); }
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  root.MyLanguageParser = window.MyLanguageParser = {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})(this);
